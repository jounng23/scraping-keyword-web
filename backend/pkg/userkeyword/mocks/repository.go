// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package userkeyword_mocks is a generated GoMock package.
package userkeyword_mocks

import (
	context "context"
	reflect "reflect"
	db "scraping-keyword-web/backend/pkg/db"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateMultipleUserKeywordByUserID mocks base method.
func (m *MockRepository) CreateMultipleUserKeywordByUserID(c context.Context, userID string, keywordIDs []string) ([]db.UserKeyword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMultipleUserKeywordByUserID", c, userID, keywordIDs)
	ret0, _ := ret[0].([]db.UserKeyword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMultipleUserKeywordByUserID indicates an expected call of CreateMultipleUserKeywordByUserID.
func (mr *MockRepositoryMockRecorder) CreateMultipleUserKeywordByUserID(c, userID, keywordIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMultipleUserKeywordByUserID", reflect.TypeOf((*MockRepository)(nil).CreateMultipleUserKeywordByUserID), c, userID, keywordIDs)
}

// GetUserKeywordByUserID mocks base method.
func (m *MockRepository) GetUserKeywordByUserID(c context.Context, userID string) ([]db.UserKeyword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserKeywordByUserID", c, userID)
	ret0, _ := ret[0].([]db.UserKeyword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserKeywordByUserID indicates an expected call of GetUserKeywordByUserID.
func (mr *MockRepositoryMockRecorder) GetUserKeywordByUserID(c, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserKeywordByUserID", reflect.TypeOf((*MockRepository)(nil).GetUserKeywordByUserID), c, userID)
}
