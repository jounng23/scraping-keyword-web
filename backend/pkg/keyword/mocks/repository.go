// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package keyword_mocks is a generated GoMock package.
package keyword_mocks

import (
	context "context"
	reflect "reflect"
	db "scraping-keyword-web/backend/pkg/db"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CrawlKeywordResults mocks base method.
func (m *MockRepository) CrawlKeywordResults(keywords []string) ([]db.KeywordResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CrawlKeywordResults", keywords)
	ret0, _ := ret[0].([]db.KeywordResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CrawlKeywordResults indicates an expected call of CrawlKeywordResults.
func (mr *MockRepositoryMockRecorder) CrawlKeywordResults(keywords interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CrawlKeywordResults", reflect.TypeOf((*MockRepository)(nil).CrawlKeywordResults), keywords)
}

// CreateKeywordResults mocks base method.
func (m *MockRepository) CreateKeywordResults(c context.Context, keywordResults []db.KeywordResult) ([]db.KeywordResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeywordResults", c, keywordResults)
	ret0, _ := ret[0].([]db.KeywordResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKeywordResults indicates an expected call of CreateKeywordResults.
func (mr *MockRepositoryMockRecorder) CreateKeywordResults(c, keywordResults interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeywordResults", reflect.TypeOf((*MockRepository)(nil).CreateKeywordResults), c, keywordResults)
}

// GetKeywordResultByKeywords mocks base method.
func (m *MockRepository) GetKeywordResultByKeywords(c context.Context, keywords []string) ([]db.KeywordResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeywordResultByKeywords", c, keywords)
	ret0, _ := ret[0].([]db.KeywordResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeywordResultByKeywords indicates an expected call of GetKeywordResultByKeywords.
func (mr *MockRepositoryMockRecorder) GetKeywordResultByKeywords(c, keywords interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeywordResultByKeywords", reflect.TypeOf((*MockRepository)(nil).GetKeywordResultByKeywords), c, keywords)
}
